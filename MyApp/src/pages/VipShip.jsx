import { StyleSheet, Text, View, ScrollView, TouchableOpacity, Alert, Linking } from 'react-native'
import React, { useState } from 'react'
import { useNavigation, useFocusEffect } from '@react-navigation/native'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { commonStyles, COLORS, SIZES } from '../styles/commonStyles'
import { CreateZhiFu, queryZhiFu } from '../request/auth'

export default function VipShip() {
    const nav = useNavigation()
    const [loading, setLoading] = useState(false)
    const [userInfo, setUserInfo] = useState(null)

    // È°µÈù¢ÁÑ¶ÁÇπÁõëÂê¨ - ÂΩìÁî®Êà∑ËøîÂõûÊó∂Ê£ÄÊü•‰ºöÂëòÁä∂ÊÄÅ
    useFocusEffect(
        React.useCallback(() => {
            checkUserMembershipStatus();
        }, [])
    );

    // ÊîØ‰ªòÊàêÂäüÂêé‰ºöÁî±ÂÖ®Â±ÄË∑ØÁî±Â§ÑÁêÜÔºåËøôÈáåÂè™ÈúÄË¶ÅÂú®È°µÈù¢Ëé∑ÂæóÁÑ¶ÁÇπÊó∂Âà∑Êñ∞Áä∂ÊÄÅ
    useFocusEffect(
        React.useCallback(() => {
            // È°µÈù¢Ëé∑ÂæóÁÑ¶ÁÇπÊó∂Ê£ÄÊü•‰ºöÂëòÁä∂ÊÄÅÔºàÂèØËÉΩÂàöÂÆåÊàêÊîØ‰ªòÔºâ
            checkUserMembershipStatus();
        }, [])
    );

    // ‰ºöÂëòÂ•óÈ§êÈÖçÁΩÆ
    const membershipPlans = [
        {
            id: 'monthly',
            type: 'Êúà‰ºöÂëò',
            price: '¬•9.90',
            priceDetail: '/Êúà',
            color: '#8B5CF6',
            bgGradient: ['#F3E8FF', '#E9D5FF'],
            features: [
                'ÊØèÊó•10Ê¨°Â°îÁΩóÂç†Âçú',
                '‰∏ì‰∏öËß£ËØªÁªìÊûú',
                'ËØ¶ÁªÜÂç†ÂçúÂª∫ËÆÆ'
            ],
            buttonText: 'Á´ãÂç≥ÂºÄÈÄö',
            popular: false
        },
        {
            id: 'quarterly',
            type: 'Â≠£‰ºöÂëò',
            price: '¬•29.90',
            priceDetail: '/Â≠£',
            color: '#F59E0B',
            bgGradient: ['#FEF3C7', '#FDE68A'],
            features: [
                'Êó†ÈôêÊ¨°Â°îÁΩóÂç†Âçú',
                '‰∏ì‰∏öËß£ËØªÁªìÊûú',
                'ËØ¶ÁªÜÂç†ÂçúÂª∫ËÆÆ'
            ],
            buttonText: 'Á´ãÂç≥ÂºÄÈÄö',
            popular: true
        }
    ];

    // Ê£ÄÊü•Áî®Êà∑‰ºöÂëòÁä∂ÊÄÅ
    const checkUserMembershipStatus = async () => {
        try {
            const userObj = await AsyncStorage.getItem('user');
            if (userObj) {
                const user = JSON.parse(userObj);
                setUserInfo(user);
                
                if (user.isMember && user.vip && user.vip.type !== 'ÂÖçË¥π') {
                    console.log('‚úÖ Áî®Êà∑ÂΩìÂâç‰ºöÂëòÁä∂ÊÄÅ:', {
                        isMember: user.isMember,
                        vipType: user.vip.type,
                        endDate: user.membershipEndDate
                    });
                }
            }
        } catch (error) {
            console.error('Ê£ÄÊü•‰ºöÂëòÁä∂ÊÄÅÂ§±Ë¥•:', error);
        }
    };

    // Â§ÑÁêÜÊîØ‰ªò
    const handlePurchase = async (planId, planType) => {
        if (loading) return;
        
        try {
            setLoading(true);
            
            // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
            const userObj = await AsyncStorage.getItem('user');
            if (!userObj) {
                Alert.alert('ËØ∑ÂÖàÁôªÂΩï', 'Ë¥≠‰π∞‰ºöÂëòÈúÄË¶ÅÂÖàÁôªÂΩïË¥¶Âè∑');
                return;
            }
            
            const user = JSON.parse(userObj);
            
            // ÂàõÂª∫ÊîØ‰ªòËÆ¢Âçï
            const paymentRes = await CreateZhiFu(user._id, planType);
            if (!paymentRes.success) {
                Alert.alert('ÂàõÂª∫ÊîØ‰ªòÂ§±Ë¥•', paymentRes.data.msg || 'ËØ∑Á®çÂêéÈáçËØï');
                return;
            }
            
            const { outTradeNo, orderString, amount, planInfo } = paymentRes.data.data;
            
            console.log('üìã ÊîØ‰ªòËÆ¢Âçï‰ø°ÊÅØ:', {
                outTradeNo,
                orderString: orderString ? 'Â∑≤Ëé∑Âèñ' : 'Êú™Ëé∑Âèñ',
                amount,
                planInfo
            });
            
            // ‰øùÂ≠òÊîØ‰ªò‰ø°ÊÅØ‰æõÂêéÁª≠‰ΩøÁî®
            await AsyncStorage.setItem('lastPaymentInfo', JSON.stringify({
                outTradeNo,
                planType: planType,
                amount,
                timestamp: Date.now()
            }));
            
            // Áõ¥Êé•Ë∑≥ËΩ¨ÊîØ‰ªò
            openAlipayPayment(orderString, outTradeNo, planInfo);
            
        } catch (error) {
            console.error('ÊîØ‰ªòÂ§ÑÁêÜÂ§±Ë¥•:', error);
            Alert.alert('ÊîØ‰ªòÂ§±Ë¥•', 'ÁΩëÁªúËøûÊé•ÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï');
        } finally {
            setLoading(false);
        }
    };
    
    // ÊâìÂºÄÊîØ‰ªòÂÆùÊîØ‰ªò
    const openAlipayPayment = async (paymentParams, outTradeNo, planInfo) => {
        try {
            console.log('üîç Ê£ÄÊü•ÊîØ‰ªòÂèÇÊï∞:', {
                paymentParams: paymentParams ? 'Â≠òÂú®' : '‰∏çÂ≠òÂú®',
                paramsLength: paymentParams ? paymentParams.length : 0,
                outTradeNo
            });
            
            if (!paymentParams) {
                Alert.alert('ÊîØ‰ªòÂ§±Ë¥•', 'ÊîØ‰ªòÂèÇÊï∞ÈîôËØØÔºåËØ∑ÈáçËØï');
                return;
            }
            
            // ÊûÑÂª∫ÊîØ‰ªòÂÆùÊîØ‰ªòURL
            const paymentUrl = `https://openapi-sandbox.dl.alipaydev.com/gateway.do?${paymentParams}`;
            
            console.log('üåê ÂáÜÂ§áË∑≥ËΩ¨Âà∞ÊîØ‰ªòÂÆùÊîØ‰ªò...');
            console.log('üîó ÊîØ‰ªòURLÈïøÂ∫¶:', paymentUrl.length);
            
            // ÊâìÂºÄÊîØ‰ªòÈ°µÈù¢
            await Linking.openURL(paymentUrl);
            console.log('‚úÖ ÊîØ‰ªòÈ°µÈù¢Â∑≤ÊâìÂºÄ');
            
        } catch (error) {
            console.error('‚ùå ÊîØ‰ªòÂ§ÑÁêÜÂ§±Ë¥•:', error);
            Alert.alert('ÊîØ‰ªòÂ§±Ë¥•', 'Êó†Ê≥ïÊâìÂºÄÊîØ‰ªòÈ°µÈù¢ÔºåËØ∑Á®çÂêéÈáçËØï');
        }
    };
    
    // Ê£ÄÊü•ÊîØ‰ªòÁªìÊûú
    const checkPaymentResult = async (outTradeNo) => {
        try {
            Alert.alert('üîç Êü•ËØ¢‰∏≠', 'Ê≠£Âú®Êü•ËØ¢ÊîØ‰ªòÁä∂ÊÄÅÔºåËØ∑Á®çÂÄô...');
            
            const result = await queryZhiFu(outTradeNo);
            
            if (result.success && result.data.data && result.data.data.status === 'paid') {
                Alert.alert(
                    'üéâ ÊîØ‰ªòÊàêÂäüÔºÅ',
                    'ÊÅ≠ÂñúÊÇ®ÔºÅ‰ºöÂëòÂ∑≤ÊàêÂäüÂºÄÈÄö\n\n‚úÖ ‰ºöÂëòÊùÉÁõäÁ´ãÂç≥ÁîüÊïà\nüîÆ ÂºÄÂßã‰∫´ÂèóÊó†ÈôêÂç†ÂçúÊúçÂä°',
                    [{ 
                        text: 'ÂºÄÂßã‰ΩøÁî®', 
                        onPress: () => nav.goBack()
                    }]
                );
                // Âà∑Êñ∞Áî®Êà∑Áä∂ÊÄÅ
                checkUserMembershipStatus();
            } else {
                Alert.alert(
                    '‚è≥ ÊîØ‰ªòÁ°ÆËÆ§‰∏≠',
                    'Á≥ªÁªüÊ≠£Âú®Á°ÆËÆ§ÊÇ®ÁöÑÊîØ‰ªòÁä∂ÊÄÅ\n\nÂ¶ÇÊûúÊÇ®Â∑≤ÂÆåÊàêÊîØ‰ªòÔºåËØ∑Á®çÁ≠âÁâáÂàª\nÊîØ‰ªòÊàêÂäü‰ºöÂú®Âá†ÂàÜÈíüÂÜÖÁîüÊïà',
                    [
                        { text: 'Á®çÂêéÂÜçËØï', style: 'cancel' },
                        { 
                            text: 'ÈáçÊñ∞Êü•ËØ¢', 
                            onPress: () => setTimeout(() => checkPaymentResult(outTradeNo), 1000)
                        }
                    ]
                );
            }
        } catch (error) {
            console.error('Êü•ËØ¢ÊîØ‰ªòÁªìÊûúÂ§±Ë¥•:', error);
            Alert.alert('Êü•ËØ¢Â§±Ë¥•', 'ÁΩëÁªúËøûÊé•ÂºÇÂ∏∏ÔºåËØ∑Á®çÂêéÈáçËØï');
        }
    };


    const renderMembershipCard = (plan, index) => {
        return (
            <View 
                key={plan.id} 
                style={[
                    styles.membershipCard,
                    { backgroundColor: plan.bgGradient[0] },
                    plan.popular && styles.popularCard
                ]}
            >
                {plan.popular && (
                    <View style={[styles.popularBadge, { backgroundColor: plan.color }]}>
                        <Text style={styles.popularText}>Êé®Ëçê</Text>
                    </View>
                )}

                <View style={styles.cardHeader}>
                    <Text style={[styles.planType, { color: plan.color }]}>{plan.type}</Text>
                    <View style={styles.priceContainer}>
                        <Text style={[styles.price, { color: plan.color }]}>{plan.price}</Text>
                        <Text style={[styles.priceDetail, { color: plan.color }]}>{plan.priceDetail}</Text>
                    </View>
                </View>

                <View style={styles.featuresContainer}>
                    {plan.features.map((feature, featureIndex) => (
                        <View key={featureIndex} style={styles.featureRow}>
                            <Text style={styles.featureIcon}>‚úì</Text>
                            <Text style={styles.featureText}>{feature}</Text>
                        </View>
                    ))}
                </View>

                <TouchableOpacity
                    style={[styles.subscribeButton, { backgroundColor: plan.color }]}
                    onPress={() => handlePurchase(plan.id, plan.type)}
                    disabled={loading}
                >
                    <Text style={styles.buttonText}>
                        {loading ? 'Â§ÑÁêÜ‰∏≠...' : plan.buttonText}
                    </Text>
                </TouchableOpacity>
            </View>
        )
    }

    /**
     * Ê∏≤Êüì‰∏ªË¶ÅÂÜÖÂÆπ
     * @returns {JSX.Element} ‰∏ªË¶ÅÂÜÖÂÆπÁªÑ‰ª∂
     */
    const renderMainContent = () => (
        <View style={styles.container}>
            <ScrollView 
                style={styles.scrollView} 
                showsVerticalScrollIndicator={false}
                contentContainerStyle={styles.scrollContent}
            >
                {/* Â§¥ÈÉ®Âå∫Âüü */}
                <View style={styles.header}>
                    <TouchableOpacity 
                        style={styles.backButton} 
                        onPress={() => nav.goBack()}
                    >
                        <Text style={styles.backIcon}>‚Üê</Text>
                    </TouchableOpacity>
                    <View style={styles.headerContent}>
                        <Text style={styles.headerTitle}>‰ºöÂëò‰∏≠ÂøÉ</Text>
                        <Text style={styles.headerSubtitle}>Ëß£ÈîÅÊõ¥Â§öÁ•ûÁßòÂäüËÉΩÔºå‰∫´Âèó‰∏ìÂ±ûÂç†Âçú‰ΩìÈ™å</Text>
                    </View>
                </View>

                {/* ÂΩìÂâç‰ºöÂëòÁä∂ÊÄÅ */}
                {userInfo && userInfo.isMember && (
                    <View style={styles.currentStatusCard}>
                        <Text style={styles.statusTitle}>‚ú® ÂΩìÂâç‰ºöÂëòÁä∂ÊÄÅ</Text>
                        <Text style={styles.statusText}>
                            {userInfo.vip?.type || 'ÂÖçË¥πÁî®Êà∑'} 
                            {userInfo.membershipEndDate && 
                                ` ¬∑ Âà∞ÊúüÊó∂Èó¥Ôºö${new Date(userInfo.membershipEndDate).toLocaleDateString()}`
                            }
                        </Text>
                    </View>
                )}

                {/* ‰ºöÂëòÂ•óÈ§êÂç°Áâá */}
                <View style={styles.plansContainer}>
                    {membershipPlans.map((plan, index) => renderMembershipCard(plan, index))}
                </View>



            </ScrollView>
        </View>
    );

    /**
     * Áªü‰∏ÄÁöÑÁªÑ‰ª∂Ê∏≤ÊüìÈÄªËæë
     * Ê†πÊçÆ‰∏çÂêåÁä∂ÊÄÅËøîÂõûÂØπÂ∫îÁöÑÁïåÈù¢
     */
    return (() => {
        // Ê≠£Â∏∏Áä∂ÊÄÅÔºåÊòæÁ§∫‰∏ªË¶ÅÂÜÖÂÆπ
        return renderMainContent();
    })();
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: "#f8f5ff",
    },
    scrollView: {
        flex: 1,
    },
    scrollContent: {
        paddingBottom: 100,
    },
    header: {
        backgroundColor: '#8B5CF6',
        paddingTop: 50,
        paddingBottom: 25,
        paddingHorizontal: 20,
        borderBottomLeftRadius: 25,
        borderBottomRightRadius: 25,
        position: 'relative',
    },
    backButton: {
        position: 'absolute',
        top: 55,
        left: 20,
        width: 40,
        height: 40,
        borderRadius: 20,
        backgroundColor: 'rgba(255, 255, 255, 0.2)',
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 1,
    },
    backIcon: {
        fontSize: 20,
        color: '#fff',
        fontWeight: '600',
    },
    headerContent: {
        alignItems: 'center',
        width: '100%',
    },
    headerTitle: {
        color: '#fff',
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 5,
    },
    headerSubtitle: {
        color: 'rgba(255, 255, 255, 0.8)',
        fontSize: 14,
        textAlign: 'center',
    },
    plansContainer: {
        paddingHorizontal: 15,
        paddingTop: 20,
    },
    membershipCard: {
        borderRadius: 20,
        padding: 20,
        marginBottom: 20,
        shadowColor: '#8B5CF6',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 10,
        elevation: 6,
        borderWidth: 1,
        borderColor: 'rgba(139, 92, 246, 0.1)',
        position: 'relative',
    },
    popularCard: {
        borderWidth: 2,
        borderColor: '#F59E0B',

    },
    popularBadge: {
        position: 'absolute',
        top: -10,
        right: 20,
        paddingHorizontal: 15,
        paddingVertical: 5,
        borderRadius: 15,
    },
    popularText: {
        color: '#fff',
        fontSize: 12,
        fontWeight: '600',
    },
    specialBadge: {
        position: 'absolute',
        top: -10,
        left: 20,
        paddingHorizontal: 15,
        paddingVertical: 5,
        borderRadius: 15,
    },
    badgeText: {
        color: '#fff',
        fontSize: 12,
        fontWeight: '600',
    },
    cardHeader: {
        alignItems: 'center',
        marginBottom: 20,
        marginTop: 10,
    },
    planType: {
        fontSize: 20,
        fontWeight: '700',
        marginBottom: 8,
    },
    priceContainer: {
        flexDirection: 'row',
        alignItems: 'baseline',
    },
    price: {
        fontSize: 32,
        fontWeight: '800',
    },
    priceDetail: {
        fontSize: 16,
        fontWeight: '500',
        marginLeft: 5,
    },
    featuresContainer: {
        marginBottom: 25,
    },
    featureRow: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 12,
    },
    featureIcon: {
        fontSize: 16,
        color: '#10B981',
        fontWeight: '600',
        marginRight: 10,
        width: 20,
    },
    featureText: {
        fontSize: 15,
        color: '#374151',
        fontWeight: '500',
        flex: 1,
    },
    subscribeButton: {
        borderRadius: 15,
        paddingVertical: 15,
        alignItems: 'center',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 3,
    },
    freeButton: {
        backgroundColor: '#9CA3AF',
    },
    buttonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '600',
    },
    freeButtonText: {
        color: '#6B7280',
    },
    currentStatusCard: {
        backgroundColor: '#fff',
        borderRadius: 15,
        padding: 20,
        marginHorizontal: 15,
        marginBottom: 20,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 5,
        elevation: 3,
    },
    statusTitle: {
        fontSize: 18,
        fontWeight: '700',
        color: '#374151',
        marginBottom: 10,
    },
    statusText: {
        fontSize: 16,
        color: '#4B5563',
        lineHeight: 22,
    },
    // Ë∞ÉËØïÊ†∑Âºè
    debugContainer: {
        margin: 20,
        padding: 15,
        backgroundColor: '#FFF3CD',
        borderRadius: 8,
        borderWidth: 1,
        borderColor: '#FFC107',
    },
    debugButton: {
        backgroundColor: '#FF6B35',
        paddingVertical: 12,
        paddingHorizontal: 20,
        borderRadius: 6,
        marginBottom: 10,
        alignItems: 'center',
    },
    debugButtonText: {
        color: '#fff',
        fontSize: 14,
        fontWeight: '600',
    },
}); 